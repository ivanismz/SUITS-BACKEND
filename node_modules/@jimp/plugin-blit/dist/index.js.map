{"version":3,"sources":["../src/index.js"],"names":["blit","src","x","y","srcx","srcy","srcw","srch","cb","constructor","throwError","call","bitmap","width","height","Math","round","maxw","maxh","baseImage","scanQuiet","sx","sy","idx","dstIdx","getPixelIndex","data"],"mappings":";;;;;;;;;;;;;AAAA;;;;eAEe;AAAA,SAAO;AACpB;;;;;;;;;;;;AAYAA,IAAAA,IAboB,gBAafC,GAbe,EAaVC,CAbU,EAaPC,CAbO,EAaJC,IAbI,EAaEC,IAbF,EAaQC,IAbR,EAacC,IAbd,EAaoBC,EAbpB,EAawB;AAC1C,UAAI,EAAEP,GAAG,YAAY,KAAKQ,WAAtB,CAAJ,EAAwC;AACtC,eAAOC,kBAAWC,IAAX,CAAgB,IAAhB,EAAsB,iCAAtB,EAAyDH,EAAzD,CAAP;AACD;;AAED,UAAI,OAAON,CAAP,KAAa,QAAb,IAAyB,OAAOC,CAAP,KAAa,QAA1C,EAAoD;AAClD,eAAOO,kBAAWC,IAAX,CAAgB,IAAhB,EAAsB,yBAAtB,EAAiDH,EAAjD,CAAP;AACD;;AAED,UAAI,OAAOJ,IAAP,KAAgB,UAApB,EAAgC;AAC9BI,QAAAA,EAAE,GAAGJ,IAAL;AACAA,QAAAA,IAAI,GAAG,CAAP;AACAC,QAAAA,IAAI,GAAG,CAAP;AACAC,QAAAA,IAAI,GAAGL,GAAG,CAACW,MAAJ,CAAWC,KAAlB;AACAN,QAAAA,IAAI,GAAGN,GAAG,CAACW,MAAJ,CAAWE,MAAlB;AACD,OAND,MAMO,IACL,QAAOV,IAAP,cAAuBC,IAAvB,KACA,QAAOA,IAAP,cAAuBC,IAAvB,CADA,IAEA,QAAOA,IAAP,cAAuBC,IAAvB,CAHK,EAIL;AACAH,QAAAA,IAAI,GAAGA,IAAI,IAAI,CAAf;AACAC,QAAAA,IAAI,GAAGA,IAAI,IAAI,CAAf;AACAC,QAAAA,IAAI,GAAGA,IAAI,IAAIL,GAAG,CAACW,MAAJ,CAAWC,KAA1B;AACAN,QAAAA,IAAI,GAAGA,IAAI,IAAIN,GAAG,CAACW,MAAJ,CAAWE,MAA1B;AACD,OATM,MASA;AACL,eAAOJ,kBAAWC,IAAX,CACL,IADK,EAEL,wCAFK,EAGLH,EAHK,CAAP;AAKD,OA9ByC,CAgC1C;;;AACAN,MAAAA,CAAC,GAAGa,IAAI,CAACC,KAAL,CAAWd,CAAX,CAAJ;AACAC,MAAAA,CAAC,GAAGY,IAAI,CAACC,KAAL,CAAWb,CAAX,CAAJ,CAlC0C,CAoC1C;;AACAC,MAAAA,IAAI,GAAGW,IAAI,CAACC,KAAL,CAAWZ,IAAX,CAAP;AACAC,MAAAA,IAAI,GAAGU,IAAI,CAACC,KAAL,CAAWX,IAAX,CAAP;AACAC,MAAAA,IAAI,GAAGS,IAAI,CAACC,KAAL,CAAWV,IAAX,CAAP;AACAC,MAAAA,IAAI,GAAGQ,IAAI,CAACC,KAAL,CAAWT,IAAX,CAAP;AAEA,UAAMU,IAAI,GAAG,KAAKL,MAAL,CAAYC,KAAzB;AACA,UAAMK,IAAI,GAAG,KAAKN,MAAL,CAAYE,MAAzB;AACA,UAAMK,SAAS,GAAG,IAAlB;AAEAlB,MAAAA,GAAG,CAACmB,SAAJ,CAAchB,IAAd,EAAoBC,IAApB,EAA0BC,IAA1B,EAAgCC,IAAhC,EAAsC,UAASc,EAAT,EAAaC,EAAb,EAAiBC,GAAjB,EAAsB;AAC1D,YACErB,CAAC,GAAGmB,EAAJ,IAAU,CAAV,IACAlB,CAAC,GAAGmB,EAAJ,IAAU,CADV,IAEAL,IAAI,GAAGf,CAAP,GAAWmB,EAAX,GAAgB,CAFhB,IAGAH,IAAI,GAAGf,CAAP,GAAWmB,EAAX,GAAgB,CAJlB,EAKE;AACA,cAAME,MAAM,GAAGL,SAAS,CAACM,aAAV,CAAwBvB,CAAC,GAAGmB,EAAJ,GAASjB,IAAjC,EAAuCD,CAAC,GAAGmB,EAAJ,GAASjB,IAAhD,CAAf;AACAc,UAAAA,SAAS,CAACP,MAAV,CAAiBc,IAAjB,CAAsBF,MAAtB,IAAgC,KAAKZ,MAAL,CAAYc,IAAZ,CAAiBH,GAAjB,CAAhC;AACAJ,UAAAA,SAAS,CAACP,MAAV,CAAiBc,IAAjB,CAAsBF,MAAM,GAAG,CAA/B,IAAoC,KAAKZ,MAAL,CAAYc,IAAZ,CAAiBH,GAAG,GAAG,CAAvB,CAApC;AACAJ,UAAAA,SAAS,CAACP,MAAV,CAAiBc,IAAjB,CAAsBF,MAAM,GAAG,CAA/B,IAAoC,KAAKZ,MAAL,CAAYc,IAAZ,CAAiBH,GAAG,GAAG,CAAvB,CAApC;AACAJ,UAAAA,SAAS,CAACP,MAAV,CAAiBc,IAAjB,CAAsBF,MAAM,GAAG,CAA/B,IAAoC,KAAKZ,MAAL,CAAYc,IAAZ,CAAiBH,GAAG,GAAG,CAAvB,CAApC;AACD;AACF,OAbD;;AAeA,UAAI,0BAAcf,EAAd,CAAJ,EAAuB;AACrBA,QAAAA,EAAE,CAACG,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB;AACD;;AAED,aAAO,IAAP;AACD;AA/EmB,GAAP;AAAA,C","sourcesContent":["import { throwError, isNodePattern } from '@jimp/utils';\n\nexport default () => ({\n  /**\n   * Blits a source image on to this image\n   * @param {Jimp} src the source Jimp instance\n   * @param {number} x the x position to blit the image\n   * @param {number} y the y position to blit the image\n   * @param {number} srcx (optional) the x position from which to crop the source image\n   * @param {number} srcy (optional) the y position from which to crop the source image\n   * @param {number} srcw (optional) the width to which to crop the source image\n   * @param {number} srch (optional) the height to which to crop the source image\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp} this for chaining of methods\n   */\n  blit(src, x, y, srcx, srcy, srcw, srch, cb) {\n    if (!(src instanceof this.constructor)) {\n      return throwError.call(this, 'The source must be a Jimp image', cb);\n    }\n\n    if (typeof x !== 'number' || typeof y !== 'number') {\n      return throwError.call(this, 'x and y must be numbers', cb);\n    }\n\n    if (typeof srcx === 'function') {\n      cb = srcx;\n      srcx = 0;\n      srcy = 0;\n      srcw = src.bitmap.width;\n      srch = src.bitmap.height;\n    } else if (\n      typeof srcx === typeof srcy &&\n      typeof srcy === typeof srcw &&\n      typeof srcw === typeof srch\n    ) {\n      srcx = srcx || 0;\n      srcy = srcy || 0;\n      srcw = srcw || src.bitmap.width;\n      srch = srch || src.bitmap.height;\n    } else {\n      return throwError.call(\n        this,\n        'srcx, srcy, srcw, srch must be numbers',\n        cb\n      );\n    }\n\n    // round input\n    x = Math.round(x);\n    y = Math.round(y);\n\n    // round input\n    srcx = Math.round(srcx);\n    srcy = Math.round(srcy);\n    srcw = Math.round(srcw);\n    srch = Math.round(srch);\n\n    const maxw = this.bitmap.width;\n    const maxh = this.bitmap.height;\n    const baseImage = this;\n\n    src.scanQuiet(srcx, srcy, srcw, srch, function(sx, sy, idx) {\n      if (\n        x + sx >= 0 &&\n        y + sy >= 0 &&\n        maxw - x - sx > 0 &&\n        maxh - y - sy > 0\n      ) {\n        const dstIdx = baseImage.getPixelIndex(x + sx - srcx, y + sy - srcy);\n        baseImage.bitmap.data[dstIdx] = this.bitmap.data[idx];\n        baseImage.bitmap.data[dstIdx + 1] = this.bitmap.data[idx + 1];\n        baseImage.bitmap.data[dstIdx + 2] = this.bitmap.data[idx + 2];\n        baseImage.bitmap.data[dstIdx + 3] = this.bitmap.data[idx + 3];\n      }\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n"],"file":"index.js"}