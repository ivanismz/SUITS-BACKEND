{"version":3,"sources":["../src/index.js"],"names":["xOffsetBasedOnAlignment","constants","font","line","maxWidth","alignment","HORIZONTAL_ALIGN_LEFT","HORIZONTAL_ALIGN_CENTER","drawCharacter","image","x","y","char","width","height","imageChar","pages","page","cloneQuiet","crop","composite","xoffset","yoffset","printText","text","defaultCharWidth","i","length","chars","test","fontChar","fontKerning","kernings","xadvance","splitLines","words","split","lines","currentLine","forEach","word","join","push","loadPages","Jimp","dir","newPages","map","read","Promise","all","process","env","DIRNAME","__dirname","measureText","measureTextHeight","FONT_SANS_8_BLACK","Path","FONT_SANS_10_BLACK","FONT_SANS_12_BLACK","FONT_SANS_14_BLACK","FONT_SANS_16_BLACK","FONT_SANS_32_BLACK","FONT_SANS_64_BLACK","FONT_SANS_128_BLACK","FONT_SANS_8_WHITE","FONT_SANS_16_WHITE","FONT_SANS_32_WHITE","FONT_SANS_64_WHITE","FONT_SANS_128_WHITE","loadFont","file","cb","throwError","call","resolve","reject","err","String","fromCharCode","id","firstString","first","second","amount","dirname","then","common","info","class","print","maxHeight","Infinity","alignmentX","alignmentY","constructor","VERTICAL_ALIGN_TOP","VERTICAL_ALIGN_BOTTOM","VERTICAL_ALIGN_MIDDLE","Object","entries","lineString","lineHeight"],"mappings":"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","sourcesContent":["import Path from 'path';\nimport bMFont from 'load-bmfont';\nimport { isNodePattern, throwError } from '@jimp/utils';\nimport { measureText, measureTextHeight } from './measure-text';\n\nfunction xOffsetBasedOnAlignment(constants, font, line, maxWidth, alignment) {\n  if (alignment === constants.HORIZONTAL_ALIGN_LEFT) {\n    return 0;\n  }\n\n  if (alignment === constants.HORIZONTAL_ALIGN_CENTER) {\n    return (maxWidth - measureText(font, line)) / 2;\n  }\n\n  return maxWidth - measureText(font, line);\n}\n\nfunction drawCharacter(image, font, x, y, char) {\n  if (char.width > 0 && char.height > 0) {\n    let imageChar = char.image;\n\n    if (!imageChar) {\n      imageChar = font.pages[char.page]\n        .cloneQuiet()\n        .crop(char.x, char.y, char.width, char.height);\n      char.image = imageChar;\n    }\n\n    return image.composite(imageChar, x + char.xoffset, y + char.yoffset);\n  }\n\n  return image;\n}\n\nfunction printText(font, x, y, text, defaultCharWidth) {\n  for (let i = 0; i < text.length; i++) {\n    let char;\n\n    if (font.chars[text[i]]) {\n      char = text[i];\n    } else if (/\\s/.test(text[i])) {\n      char = '';\n    } else {\n      char = '?';\n    }\n\n    const fontChar = font.chars[char] || {};\n    const fontKerning = font.kernings[char];\n\n    drawCharacter(this, font, x, y, fontChar || {});\n\n    x +=\n      (fontKerning && fontKerning[text[i + 1]] ? fontKerning[text[i + 1]] : 0) +\n      (fontChar.xadvance || defaultCharWidth);\n  }\n}\n\nfunction splitLines(font, text, maxWidth) {\n  const words = text.split(' ');\n  const lines = [];\n  let currentLine = [];\n\n  words.forEach(word => {\n    const line = [...currentLine, word].join(' ');\n    const length = measureText(font, line);\n\n    if (length <= maxWidth) {\n      currentLine.push(word);\n    } else {\n      lines.push(currentLine);\n      currentLine = [word];\n    }\n  });\n\n  lines.push(currentLine);\n\n  return lines;\n}\n\nfunction loadPages(Jimp, dir, pages) {\n  const newPages = pages.map(page => {\n    return Jimp.read(dir + '/' + page);\n  });\n\n  return Promise.all(newPages);\n}\n\nconst dir = process.env.DIRNAME || `${__dirname}/../`;\n\nexport default () => ({\n  constants: {\n    measureText,\n    measureTextHeight,\n    FONT_SANS_8_BLACK: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-8-black/open-sans-8-black.fnt'\n    ),\n    FONT_SANS_10_BLACK: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-10-black/open-sans-10-black.fnt'\n    ),\n    FONT_SANS_12_BLACK: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-12-black/open-sans-12-black.fnt'\n    ),\n    FONT_SANS_14_BLACK: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-14-black/open-sans-14-black.fnt'\n    ),\n    FONT_SANS_16_BLACK: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-16-black/open-sans-16-black.fnt'\n    ),\n    FONT_SANS_32_BLACK: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-32-black/open-sans-32-black.fnt'\n    ),\n    FONT_SANS_64_BLACK: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-64-black/open-sans-64-black.fnt'\n    ),\n    FONT_SANS_128_BLACK: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-128-black/open-sans-128-black.fnt'\n    ),\n\n    FONT_SANS_8_WHITE: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-8-white/open-sans-8-white.fnt'\n    ),\n    FONT_SANS_16_WHITE: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-16-white/open-sans-16-white.fnt'\n    ),\n    FONT_SANS_32_WHITE: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-32-white/open-sans-32-white.fnt'\n    ),\n    FONT_SANS_64_WHITE: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-64-white/open-sans-64-white.fnt'\n    ),\n    FONT_SANS_128_WHITE: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-128-white/open-sans-128-white.fnt'\n    ),\n\n    /**\n     * Loads a bitmap font from a file\n     * @param {string} file the file path of a .fnt file\n     * @param {function(Error, Jimp)} cb (optional) a function to call when the font is loaded\n     * @returns {Promise} a promise\n     */\n    loadFont(file, cb) {\n      if (typeof file !== 'string')\n        return throwError.call(this, 'file must be a string', cb);\n\n      return new Promise((resolve, reject) => {\n        cb =\n          cb ||\n          function(err, font) {\n            if (err) reject(err);\n            else resolve(font);\n          };\n\n        bMFont(file, (err, font) => {\n          const chars = {};\n          const kernings = {};\n\n          if (err) {\n            return throwError.call(this, err, cb);\n          }\n\n          for (let i = 0; i < font.chars.length; i++) {\n            chars[String.fromCharCode(font.chars[i].id)] = font.chars[i];\n          }\n\n          for (let i = 0; i < font.kernings.length; i++) {\n            const firstString = String.fromCharCode(font.kernings[i].first);\n            kernings[firstString] = kernings[firstString] || {};\n            kernings[firstString][\n              String.fromCharCode(font.kernings[i].second)\n            ] = font.kernings[i].amount;\n          }\n\n          loadPages(this, Path.dirname(file), font.pages).then(pages => {\n            cb(null, {\n              chars,\n              kernings,\n              pages,\n              common: font.common,\n              info: font.info\n            });\n          });\n        });\n      });\n    }\n  },\n\n  class: {\n    /**\n     * Draws a text on a image on a given boundary\n     * @param {Jimp} font a bitmap font loaded from `Jimp.loadFont` command\n     * @param {number} x the x position to start drawing the text\n     * @param {number} y the y position to start drawing the text\n     * @param {string} text the text to draw (string or object with `text`, `alignmentX`, and/or `alignmentY`)\n     * @param {number} maxWidth (optional) the boundary width to draw in\n     * @param {number} maxHeight (optional) the boundary height to draw in\n     * @param {function(Error, Jimp)} cb (optional) a function to call when the text is written\n     * @returns {Jimp} this for chaining of methods\n     */\n    print(font, x, y, text, maxWidth, maxHeight, cb) {\n      if (typeof maxWidth === 'function' && typeof cb === 'undefined') {\n        cb = maxWidth;\n        maxWidth = Infinity;\n      }\n\n      if (typeof maxWidth === 'undefined') {\n        maxWidth = Infinity;\n      }\n\n      if (typeof maxHeight === 'function' && typeof cb === 'undefined') {\n        cb = maxHeight;\n        maxWidth = Infinity;\n      }\n\n      if (typeof maxHeight === 'undefined') {\n        maxHeight = Infinity;\n      }\n\n      if (typeof font !== 'object') {\n        return throwError.call(this, 'font must be a Jimp loadFont', cb);\n      }\n\n      if (\n        typeof x !== 'number' ||\n        typeof y !== 'number' ||\n        typeof maxWidth !== 'number'\n      ) {\n        return throwError.call(this, 'x, y and maxWidth must be numbers', cb);\n      }\n\n      if (typeof text !== 'string' && typeof text !== 'object') {\n        return throwError.call(this, 'text must be a string or an object', cb);\n      }\n\n      if (typeof maxWidth !== 'number') {\n        return throwError.call(this, 'maxWidth must be a number', cb);\n      }\n\n      if (typeof maxHeight !== 'number') {\n        return throwError.call(this, 'maxHeight must be a number', cb);\n      }\n\n      let alignmentX;\n      let alignmentY;\n\n      if (typeof text === 'object') {\n        alignmentX = text.alignmentX || this.constructor.HORIZONTAL_ALIGN_LEFT;\n        alignmentY = text.alignmentY || this.constructor.VERTICAL_ALIGN_TOP;\n        ({ text } = text);\n      } else {\n        alignmentX = this.constructor.HORIZONTAL_ALIGN_LEFT;\n        alignmentY = this.constructor.VERTICAL_ALIGN_TOP;\n      }\n\n      if (\n        maxHeight !== Infinity &&\n        alignmentY === this.constructor.VERTICAL_ALIGN_BOTTOM\n      ) {\n        y = maxHeight - measureTextHeight(font, text, maxWidth);\n      } else if (\n        maxHeight !== Infinity &&\n        alignmentY === this.constructor.VERTICAL_ALIGN_MIDDLE\n      ) {\n        y = maxHeight / 2 - measureTextHeight(font, text, maxWidth) / 2;\n      }\n\n      const defaultCharWidth = Object.entries(font.chars)[0][1].xadvance;\n      const lines = splitLines(font, text, maxWidth);\n\n      lines.forEach(line => {\n        const lineString = line.join(' ');\n\n        printText.call(\n          this,\n          font,\n          x +\n            xOffsetBasedOnAlignment(\n              this.constructor,\n              font,\n              lineString,\n              maxWidth,\n              alignmentX\n            ),\n          y,\n          lineString,\n          defaultCharWidth\n        );\n\n        y += font.common.lineHeight;\n      });\n\n      if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    }\n  }\n});\n"],"file":"index.js"}