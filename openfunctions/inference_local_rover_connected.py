import json
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline
from openfunctions_utils import strip_function_calls, parse_function_call
from global_variables import get_server_input, put_llm_response, server_communication_init
from server import run_server


def get_prompt(system, user_query: str, functions: list = []) -> str:
    """
    Generates a conversation prompt based on the user's query and a list of functions.

    Parameters:
    - user_query (str): The user's query.
    - functions (list): A list of functions to include in the prompt.

    Returns:
    - str: The formatted conversation prompt.
    """
    # system = "You are an AI programming assistant, utilizing the Gorilla LLM model, developed by Gorilla LLM, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer."
    if len(functions) == 0:
        return f"{system}\n### Instruction: <<question>> {user_query}\n### Response: "
    functions_string = json.dumps(functions)
    return f"{system}\n### Instruction: <<function>>{functions_string}\n<<question>>{user_query}\n### Response: "


def format_response(response: str):
    """
    Formats the response from the OpenFunctions model.

    Parameters:
    - response (str): The response generated by the LLM.

    Returns:
    - str: The formatted response.
    - dict: The function call(s) extracted from the response.

    """
    function_call_dicts = None
    try:
        response = strip_function_calls(response)
        # Parallel function calls returned as a str, list[dict]
        if len(response) > 1: 
            function_call_dicts = []
            for function_call in response:
                function_call_dicts.append(parse_function_call(function_call))
            response = ", ".join(response)
        # Single function call returned as a str, dict
        else:
            function_call_dicts = parse_function_call(response[0])
            response = response[0]
    except Exception as e:
        # Just faithfully return the generated response str to the user
        pass
    return response, function_call_dicts

def initialize_pipe():
    # Device setup
    device : str = "cuda:0" if torch.cuda.is_available() else "cpu"
    torch_dtype = torch.float16 if torch.cuda.is_available() else torch.float32
    print("is cuda available? ", torch.cuda.is_available())
    # Model and tokenizer setup
    model_id : str = "gorilla-llm/gorilla-openfunctions-v2"
    tokenizer = AutoTokenizer.from_pretrained(model_id)
    model = AutoModelForCausalLM.from_pretrained(model_id, torch_dtype=torch_dtype, low_cpu_mem_usage=True)

    # Move model to device
    model.to(device)

    # Pipeline setup
    pipe = pipeline(
        "text-generation",
        model=model,
        tokenizer=tokenizer,
        max_new_tokens=128,
        batch_size=16,
        torch_dtype=torch_dtype,
        device=device
    )
    return pipe

def create_prompt_and_function_descriptions(user_input_prompt, current_menu, current_task=None):
    full_prompt = user_input_prompt
    functions_backend = [
    {
    "name": "on_rover_return_from_egress",
    "description": "return the rover from egress to base",
     "parameters": {
            "required": [],
     }
    },
    {
    "name": "on_rover_stop",
    "description": "end all running scripts, completely stop rover function",
     "parameters": {
            "required": [],
     }
    },
    {
    "name": "on_rover_forward_drive",
    "description": "Rover forward drive the given amount of distance in meters",
    "parameters": { 
        "distance": 
            {"type": "integer", 
             "description": "number meter the rover should drive forward"
             },
        "required": ["distance"],
        },
    },
    {
    "name": "on_rover_reverse_drive",
    "description": "Rover reverse drive the given amount of distance in meters",
    "parameters": { 
        "distance": 
            {"type": "integer", 
             "description": "number meter the rover should drive backward or in reverse direction"
             },
        "required": ["distance"],
        },
    },
    {
    "name": "on_rover_left_turn",
    "description": "Rover left turn for the given amount of angle in degrees",
    "parameters": { 
        "angle": 
            {"type": "integer", 
             "description": "Degree of angle the rover should left turn in"
             },
        "required": ["angle"],
        },
    },
    {
    "name": "on_rover_right_turn",
    "description": "Rover right turn for the given amount of angle in degrees",
    "parameters": { 
        "angle": 
            {"type": "integer", 
             "description": "Degree of angle the rover should right turn in"
             },
        "required": ["angle"],
        },
    }
]
    return full_prompt, functions_backend

pipe = initialize_pipe()
server_communication_init()
run_server()

current_menu = "rover"
    

while True: 
    input_msg = get_server_input()
    while not input_msg:
        input_msg = get_server_input()

    print("input_msg", input_msg)
        
    full_prompt, functions_backend = create_prompt_and_function_descriptions(input_msg, current_menu)
    system_prompt = "You are an AI programming assistant, you are on menu {}".format(current_menu)
    prompt_1 = get_prompt(system_prompt, input_msg, functions=functions_backend)
    output_1 = pipe(prompt_1)
    fn_call_string, function_call_dict = format_response(output_1[0]['generated_text'])
    current_task = function_call_dict['name'].split('_')[-1]
    print("new current task is", current_task)
    print("--------------------")
    print(f"User input is {input_msg}")
    print(f"Full prompt is input is {full_prompt}")
    print(f"Function call strings 1(s): {fn_call_string}")
    print(f"OpenAI compatible `function_call`: {function_call_dict}")
    print("--------------------")
    put_llm_response(function_call_dict)
     